grpc.server.port=50051
spring.application.name=microservice
server.port=8080

grpc.server.reflection-service-enabled=true
core_url_spring = ${core_url}
loan_url_spring = ${loan_url}
users_url_spring = ${users_url}

prefs_url_spring = ${prefs_url}

spring.kafka.bootstrap-servers = ${kafka}
#spring.kafka.producer.client-id = ${spring.application.name}
#spring.kafka.producer.key-serializer = org.apache.kafka.common.serialization.StringSerializer
#spring.kafka.producer.value-serializer = org.apache.kafka.common.serialization.StringSerializer
#spring.kafka.consumer.key-deserializer = org.apache.kafka.common.serialization.StringSerializer
#spring.kafka.consumer.value-deserializer =  org.apache.kafka.common.serialization.StringSerializer
#spring.kafka.consumer.client-id = ${spring.application.name}

logging.level.org.apache.kafka=DEBUG

spring.kafka.producer.retries=3
spring.kafka.producer.acks=all

#grpc.server.security.enabled=true
#grpc.server.security.certificateChain=file:certificates/server.crt
#grpc.server.security.privateKey=file:certificates/server.key
#grpc.server.security.privateKeyPassword=MyStrongPassword

#spring.datasource.url=jdbc:postgresql://localhost:5432/postgres
##spring.datasource.driver-class-name=org.postgresql.Driver
#spring.datasource.username=qwe
#spring.datasource.password=qwe
##spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.PostgreSQLDialect
#spring.jpa.hibernate.ddl-auto=update
#spring.jpa.show-sql=true
#spring.jpa.properties.hibernate.format_sql=true